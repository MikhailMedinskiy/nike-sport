name: Auto update PR description with Jira ticket

on:
  pull_request:
    types: [opened]

jobs:
  update-pr-description:
    runs-on: ubuntu-latest
    steps:
      - name: Inject Jira ticket and clean up empty Description section
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            const match = branch.match(/OBT-\d{4,5}/);
            if (!match) return;

            const jira = match[0];
            let body = context.payload.pull_request.body || "";

            // --- Update or insert Jira ticket ---
            const jiraLine = `- Ticket: [${jira}](https://entdevbcdtravel.atlassian.net/browse/${jira})`;
            const jiraHeader = '## üìã Jira Ticket';
            const ticketRegex = /- Ticket: \[OBT-[^\]]+\]\([^)]+\)/;

            if (body.includes(jiraHeader)) {
              if (ticketRegex.test(body)) {
                body = body.replace(ticketRegex, jiraLine);
              } else {
                body = body.replace(jiraHeader, `${jiraHeader}\n\n${jiraLine}`);
              }
            } else {
              body = `${jiraHeader}\n\n${jiraLine}\n\n${body}`;
            }

            // --- Remove empty ## üìù Description section ---
            const lines = body.split('\n');
            const cleanedLines = [];
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              if (line.trim() === '## üìù Description') {
                let j = i + 1;
                while (j < lines.length && lines[j].trim() === '') {
                  j++;
                }
                if (j >= lines.length || lines[j].startsWith('## ') || lines[j].startsWith('<!--')) {
                  // Skip the empty section
                  i = j - 1;
                  continue;
                }
              }
              cleanedLines.push(line);
            }

            const cleanedBody = cleanedLines.join('\n').replace(/\n{3,}/g, '\n\n').trim();

            if (cleanedBody !== context.payload.pull_request.body) {
              await github.rest.pulls.update({
                ...context.repo,
                pull_number: context.payload.pull_request.number,
                body: cleanedBody
              });
            }
